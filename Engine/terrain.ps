////////////////////////////////////////////////////////////////////////////////
// Filename: terrain.ps
////////////////////////////////////////////////////////////////////////////////

//////////////
// TEXTURES //
//////////////

Texture2D grassTexture : register(t0);
Texture2D slopeTexture : register(t1);
Texture2D rockTexture  : register(t2);

/////////////
// GLOBALS //
/////////////
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float padding;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
    float4 grassColour;
	float4 slopeColour;
	float4 rockColour;
	float slope;
	float blend;
	float4 texColour;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	grassColour = grassTexture.Sample(SampleType, input.tex);
	slopeColour = slopeTexture.Sample(SampleType, input.tex);
	rockColour = rockTexture.Sample(SampleType, input.tex);

	slope = 1.0f - input.normal.y;

	if (slope < 0.2f)
	{
	    blend = slope / 0.2f;
		texColour = lerp(grassColour, slopeColour, blend);
	}

	if ((slope < 0.7) && (slope >= 0.2f))
	{
	    blend = (slope - 0.2f) * (1.0f / (0.7f - 0.2f));
		texColour = lerp(slopeColour, rockColour, blend);
	}

	if (slope >= 0.7f)
	{
	    texColour = rockColour;
	}

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
    color = diffuseColor * lightIntensity;

    // Saturate the final light color.
    color = saturate(color);

	// Multiply the texture color and the final light color to get the result.
    color = color * texColour;

    return color;
}